{"ast":null,"code":"var _jsxFileName = \"/Users/galrazabi/Desktop/Harmoni /client/src/components/RehearsalRoom.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, createContext } from \"react\";\nimport { useGetIsAdmin } from \"../hooks/useGetIsAdmin\";\nimport { useGetUserId } from '../hooks/useGetUserId';\nimport { useNavigate } from \"react-router-dom\";\nimport { useCookies } from 'react-cookie';\nimport { MainPlayer } from './MainPlayer';\nimport { SearchSong } from \"./SearchSong\";\nimport { io } from 'socket.io-client';\nimport { Live } from './Live';\nimport config from '../config.json';\nimport { RoomSelection } from \"./RoomSelection\";\n\n// Create a context for managing WebSocket connections across components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SocketContext = /*#__PURE__*/createContext();\nexport const RehearsalRoom = () => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isLive, setIsLive] = useState(false);\n  const [lyricsOrChords, setLyricsOrChords] = useState([]);\n  const [songData, setSongData] = useState({});\n  const [roomId, setRoomId] = useState(\"\");\n  const navigate = useNavigate();\n  const userId = useGetUserId();\n  const isAdmin = useGetIsAdmin();\n  const [_, setCookie] = useCookies([\"access_token\"]);\n  useEffect(() => {\n    // Initialize socket connection only once and send the user id saved in the local storage\n    const newSocket = io(`${config.backend.url}`, {\n      query: {\n        userId\n      }\n    });\n    setSocket(newSocket);\n    newSocket.on(\"connect\", () => {\n      console.log(\"Socket successfully connected:\", newSocket.id);\n    });\n    const handleJoinRoomSuccessfully = roomID => {\n      setRoomId(roomID);\n    };\n    const handleStartRehearsal = () => {\n      setIsLive(true);\n    };\n    const handleEndRehearsal = () => {\n      setIsLive(false);\n    };\n    const handleLyricsAndChords = ({\n      song,\n      lyricsAndChords\n    }) => {\n      setLyricsOrChords(lyricsAndChords);\n      setSongData(song);\n    };\n    const handleLyrics = ({\n      song,\n      lyrics\n    }) => {\n      setLyricsOrChords(lyrics);\n      setSongData(song);\n    };\n    const handleError = err => {\n      alert(err);\n    };\n    newSocket.on('joinRoomSuccessfully', handleJoinRoomSuccessfully);\n    newSocket.on(\"startRehearsal\", handleStartRehearsal);\n    newSocket.on(\"sendLyricsAndChords\", handleLyricsAndChords);\n    newSocket.on(\"sendLyrics\", handleLyrics);\n    newSocket.on(\"endRehearsal\", handleEndRehearsal);\n    newSocket.on(\"error\", handleError);\n    return () => {\n      // Clean up socket listeners on component unmount\n      newSocket.off('joinRoomSuccessfully', handleJoinRoomSuccessfully);\n      newSocket.off(\"startRehearsal\", handleStartRehearsal);\n      newSocket.off(\"sendLyrics\", handleLyricsAndChords);\n      newSocket.off(\"sendLyricsAndChords\", handleLyricsAndChords);\n      newSocket.off(\"endRehearsal\", handleEndRehearsal);\n      newSocket.off(\"error\", handleError);\n      newSocket.disconnect();\n    };\n  }, [userId, isAdmin]);\n\n  // Log out user, ending rehearsal if admin is live\n  const logout = () => {\n    if (isAdmin && isLive) {\n      socket.emit(\"adminEndRehearsal\", roomId);\n    }\n    setCookie(\"access_token\", \"\");\n    window.localStorage.removeItem(\"userId\");\n    window.localStorage.removeItem(\"isAdmin\");\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      socket,\n      roomId,\n      logout\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fullscreen\",\n      children: [roomId === \"\" ? /*#__PURE__*/_jsxDEV(RoomSelection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this) : !isLive ? isAdmin ? /*#__PURE__*/_jsxDEV(SearchSong, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(MainPlayer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 52\n      }, this) : /*#__PURE__*/_jsxDEV(Live, {\n        songData: songData,\n        lyricsOrChords: lyricsOrChords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Room ID: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(RehearsalRoom, \"CdTJnvY4Q3G6PYH8SHNvUYOXoVg=\", false, function () {\n  return [useNavigate, useGetUserId, useGetIsAdmin, useCookies];\n});\n_c = RehearsalRoom;\nvar _c;\n$RefreshReg$(_c, \"RehearsalRoom\");","map":{"version":3,"names":["useEffect","useState","createContext","useGetIsAdmin","useGetUserId","useNavigate","useCookies","MainPlayer","SearchSong","io","Live","config","RoomSelection","jsxDEV","_jsxDEV","SocketContext","RehearsalRoom","_s","socket","setSocket","isLive","setIsLive","lyricsOrChords","setLyricsOrChords","songData","setSongData","roomId","setRoomId","navigate","userId","isAdmin","_","setCookie","newSocket","backend","url","query","on","console","log","id","handleJoinRoomSuccessfully","roomID","handleStartRehearsal","handleEndRehearsal","handleLyricsAndChords","song","lyricsAndChords","handleLyrics","lyrics","handleError","err","alert","off","disconnect","logout","emit","window","localStorage","removeItem","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/galrazabi/Desktop/Harmoni /client/src/components/RehearsalRoom.js"],"sourcesContent":["import { useEffect, useState, createContext } from \"react\";\nimport { useGetIsAdmin } from \"../hooks/useGetIsAdmin\"\nimport { useGetUserId } from '../hooks/useGetUserId'\nimport { useNavigate } from \"react-router-dom\";\nimport { useCookies } from 'react-cookie'\nimport { MainPlayer } from './MainPlayer'\nimport { SearchSong } from \"./SearchSong\";\nimport { io } from 'socket.io-client';\nimport {Live} from './Live'\nimport config from '../config.json' ;\nimport { RoomSelection } from \"./RoomSelection\";\n\n\n// Create a context for managing WebSocket connections across components\nexport const SocketContext = createContext();\n\nexport const RehearsalRoom = () => {\n\n    const [socket, setSocket] = useState(null);\n    const [ isLive, setIsLive ] = useState(false)\n    const [lyricsOrChords, setLyricsOrChords] = useState([])\n    const [songData, setSongData] = useState({})\n    const [roomId, setRoomId ] = useState(\"\")\n    const navigate = useNavigate()\n\n    const userId = useGetUserId()\n    const isAdmin = useGetIsAdmin()\n    const [_, setCookie] = useCookies([\"access_token\"])\n\n\n    useEffect(() => {\n        // Initialize socket connection only once and send the user id saved in the local storage\n        const newSocket = io(`${config.backend.url}`, {\n            query : {userId}\n        });\n        setSocket(newSocket);\n\n        newSocket.on(\"connect\", () => {\n            console.log(\"Socket successfully connected:\", newSocket.id);\n        });\n\n        const handleJoinRoomSuccessfully = (roomID) => {\n            setRoomId(roomID)\n        }\n\n        const handleStartRehearsal = () => {\n            setIsLive(true)\n        };\n\n        const handleEndRehearsal = () => {\n            setIsLive(false)\n        };\n\n        const handleLyricsAndChords = ({song ,lyricsAndChords}) => {\n            setLyricsOrChords(lyricsAndChords)\n            setSongData(song)\n        };\n\n        const handleLyrics = ({song ,lyrics}) => {\n            setLyricsOrChords(lyrics)\n            setSongData(song)\n        };\n\n        const handleError = (err) => {\n            alert(err)\n        }\n\n        newSocket.on('joinRoomSuccessfully', handleJoinRoomSuccessfully)\n        newSocket.on(\"startRehearsal\", handleStartRehearsal);\n        newSocket.on(\"sendLyricsAndChords\",handleLyricsAndChords);\n        newSocket.on(\"sendLyrics\",handleLyrics);\n        newSocket.on(\"endRehearsal\", handleEndRehearsal);\n        newSocket.on(\"error\", handleError);\n\n        \n        return () => { \n            // Clean up socket listeners on component unmount\n            newSocket.off('joinRoomSuccessfully', handleJoinRoomSuccessfully); \n            newSocket.off(\"startRehearsal\", handleStartRehearsal); \n            newSocket.off(\"sendLyrics\", handleLyricsAndChords);\n            newSocket.off(\"sendLyricsAndChords\", handleLyricsAndChords);\n            newSocket.off(\"endRehearsal\", handleEndRehearsal); \n            newSocket.off(\"error\", handleError); \n            newSocket.disconnect();\n        };\n    }, [userId, isAdmin]); \n\n    // Log out user, ending rehearsal if admin is live\n    const logout = () => {\n        if (isAdmin && isLive) { \n            socket.emit(\"adminEndRehearsal\", roomId)\n        }\n        setCookie(\"access_token\", \"\")\n        window.localStorage.removeItem(\"userId\")\n        window.localStorage.removeItem(\"isAdmin\")\n        navigate(\"/\")\n    }\n\n\n    return (\n        <SocketContext.Provider value={{ socket, roomId, logout }}>\n            <div className=\"container-fullscreen\">\n                { roomId === \"\" ? \n                    <RoomSelection />\n                 : ( !isLive ? \n                        isAdmin ? <SearchSong /> : <MainPlayer />\n                     : \n                        <Live songData={songData} lyricsOrChords={lyricsOrChords} />\n                )}\n\n                <p>Room ID: {roomId}</p>\n\n            </div>\n\n    </SocketContext.Provider>\n    );\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}